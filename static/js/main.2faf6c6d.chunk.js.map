{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","props","clickHandler","setState","myCol","getCol","state","class","style","background","this","onClick","Component","TableRow","counter","i","cols","map","Table","decreaseRows","numRows","increaseRows","decreaseCols","numCols","increaseCols","changeColor","newColor","currColor","getColor","parsed","changeCol","decRow","incRow","decCol","incCol","cellspacing","border","Buttons","DropDown","onChangeHandler","e","target","value","options","color","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAKqBA,G,kBACjB,WAAYC,GAAQ,IAAD,8BACtB,4CAAMA,KAMHC,aAAe,WAClB,EAAKC,SAAS,CAACC,MAAO,EAAKH,MAAMI,UANjC,EAAKC,MAAQ,CACTF,MAAO,QAHW,E,sEAYtB,OAAO,yBAAKG,MAAM,OAAOC,MAAO,CAACC,WAAYC,KAAKJ,MAAMF,OAAQO,QAASD,KAAKR,mB,GAbxCU,cCAlBC,E,YACjB,WAAYZ,GAAQ,qEACjBA,I,sEAIN,IAFa,IAAD,OACRa,EAAU,GACLC,EAAI,EAAGA,EAAIL,KAAKT,MAAMe,KAAMD,IACjCD,EAAQC,GAAKA,EAGjB,OADaD,EAAQG,KAAI,kBAAM,4BAAI,kBAAC,EAAD,CAAWZ,OAAQ,EAAKJ,MAAMI,iB,GAT5BO,aCCjBM,E,YACjB,WAAYjB,GAAQ,IAAD,8BACtB,4CAAMA,KAOHkB,aAAe,kBAAM,EAAKhB,SAAS,CAACiB,QAAS,EAAKd,MAAMc,QAAU,KAR/C,EASnBC,aAAe,kBAAM,EAAKlB,SAAS,CAACiB,QAAS,EAAKd,MAAMc,QAAU,KAT/C,EAUnBE,aAAe,kBAAM,EAAKnB,SAAS,CAACoB,QAAS,EAAKjB,MAAMiB,QAAU,KAV/C,EAWnBC,aAAe,kBAAM,EAAKrB,SAAS,CAACoB,QAAS,EAAKjB,MAAMiB,QAAU,KAX/C,EAYnBE,YAAc,SAACC,GAAD,OAAc,EAAKvB,SAAS,CAACwB,UAAWD,KAZnC,EAanBE,SAAW,kBAAM,EAAKtB,MAAMqB,WAX/B,EAAKrB,MAAQ,CACTqB,UAAW,OACXP,QAAS,EACTG,QAAS,GALS,E,sEAgBtB,IAFa,IAAD,OACRT,EAAU,GACLC,EAAI,EAAGA,EAAIL,KAAKJ,MAAMc,QAASL,IACpCD,EAAQC,GAAKA,EAEjB,IAAIc,EAASf,EAAQG,KAAI,WACxB,OAAO,4BAAI,kBAAC,EAAD,CAAUD,KAAM,EAAKV,MAAMiB,QAASlB,OAAQ,EAAKC,MAAMqB,gBAEnE,OACC,6BACA,kBAAC,EAAD,CAAUG,UAAWpB,KAAKe,cAC1B,kBAAC,EAAD,CAASM,OAAQrB,KAAKS,aAAca,OAAQtB,KAAKW,aAAcY,OAAQvB,KAAKY,aAAcY,OAAQxB,KAAKc,eACvG,2BAAOW,YAAY,IAAIC,OAAO,KAC7BP,Q,GA5BgCjB,aAmC7ByB,E,YACF,WAAYpC,GAAQ,qEACVA,I,sEAGN,OACQ,6BACA,4BAAQU,QAASD,KAAKT,MAAM8B,QAA5B,mBACA,4BAAQpB,QAASD,KAAKT,MAAM+B,QAA5B,mBACA,4BAAQrB,QAASD,KAAKT,MAAMgC,QAA5B,mBACA,4BAAQtB,QAASD,KAAKT,MAAMiC,QAA5B,mBAJA,IAI6D,kC,GAVvDtB,aAsBhB0B,E,YACF,WAAYrC,GAAQ,IAAD,8BACf,4CAAMA,KAEVsC,gBAAkB,SAACC,GACtB,EAAKvC,MAAM6B,UAAUU,EAAEC,OAAOC,QAJR,E,sEAOtB,IACIC,EADa,CAAC,OAAQ,QAAS,OAAQ,MAAO,UACzB1B,KAAI,SAAC2B,GAAD,OAAW,oCAAUA,EAAV,QACxC,OACC,4BAAQC,SAAUnC,KAAK6B,iBAClBI,O,GAZgB/B,a,MChDRkC,MANf,WACI,OACC,kBAAC,EAAD,OCCeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2faf6c6d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TableCell.css';\n\nexport default class TableCell extends Component {\n    constructor(props) {\n\tsuper(props);\n\tthis.state = {\n\t    myCol: \"grey\"\n\t}\n    }\n    \n    clickHandler = () => {\n\tthis.setState({myCol: this.props.getCol})\n    };\n\n    render() {\n\treturn <div class=\"cell\" style={{background: this.state.myCol}} onClick={this.clickHandler}></div>;\n            }\n}\n\nTableCell.propTypes = {\n    getCol: PropTypes.string.isRequired\n};","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport TableCell from './TableCell';\n\nexport default class TableRow extends Component {\n    constructor(props) {\n\tsuper(props);\n    }\n    render() {\n\tvar counter = [];\n\tfor (var i = 0; i < this.props.cols; i++) {\n\t    counter[i] = i;\n\t}\n\tvar parsed = counter.map(() => <td><TableCell getCol={this.props.getCol}/></td>);\t\n\treturn parsed;\n    }\n}\n\nTableRow.propTypes = {\n    cols: PropTypes.number.isRequired,\n    getCol: PropTypes.string.isRequired\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport TableRow from './TableRow';\nimport TableCell from './TableCell';\n\nexport default class Table extends Component {\n    constructor(props) {\n\tsuper(props);\n\tthis.state = {\n\t    currColor: \"blue\",\n\t    numRows: 1,\n\t    numCols: 1\n\t}\n    }   \n    decreaseRows = () => this.setState({numRows: this.state.numRows - 1});\n    increaseRows = () => this.setState({numRows: this.state.numRows + 1});\n    decreaseCols = () => this.setState({numCols: this.state.numCols - 1});\n    increaseCols = () => this.setState({numCols: this.state.numCols + 1});\n    changeColor = (newColor) => this.setState({currColor: newColor});\n    getColor = () => this.state.currColor;\n    render() {\t\n\tvar counter = [];\n\tfor (var i = 0; i < this.state.numRows; i++) {\n\t    counter[i] = i;\n\t}\n\tvar parsed = counter.map(() => {\n\t\treturn <tr><TableRow cols={this.state.numCols} getCol={this.state.currColor}/></tr>;\n\t    });\n\treturn (\n\t\t<div>\n\t\t<DropDown changeCol={this.changeColor}/>\n\t\t<Buttons decRow={this.decreaseRows} incRow={this.increaseRows} decCol={this.decreaseCols} incCol={this.increaseCols}/>\n\t\t<table cellspacing=\"0\" border=\"0\">\n\t\t{parsed}\n\t\t</table>\n\t\t</div>\n\t\t);\t    \n    }\n}\n\nclass Buttons extends Component {\n    constructor(props) {\n        super(props);\n     }\n    render() {\n        return (\n                <div>\n                <button onClick={this.props.decRow}> Decrease Rows </button>\n                <button onClick={this.props.incRow}> Increase Rows </button>\n                <button onClick={this.props.decCol}> Decrease Cols </button>\n                <button onClick={this.props.incCol}> Increase Cols </button> <br/>\n                </div>\n                );\n    }\n}\nButtons.propTypes = {\n    decRow: PropTypes.func,\n    incRow: PropTypes.func,\n    decCol: PropTypes.func,\n    incCol: PropTypes.func\n};\n\nclass DropDown extends Component {\n    constructor(props) {\n        super(props);\n    }\n    onChangeHandler = (e) => {\n\tthis.props.changeCol(e.target.value);\n    };\n    render() {\n\tvar listColors = [\"blue\", \"green\", \"pink\", \"red\", \"purple\"];\n\tvar options = listColors.map((color) => <option> {color} </option>);\n\treturn (\n\t\t<select onChange={this.onChangeHandler}>\n\t\t    {options}\n                </select>\n\t\t);\n    }\n}\nDropDown.propTypes = {\n    changeCol: PropTypes.func\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Table from './components/Table';\nimport TableRow from './components/TableRow';\nimport TableCell from './components/TableCell';\n\nimport './App.css';\n\nfunction App() {\n    return (\n\t    <Table/>\n\t    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}